// -----------------------------------------------------------------------------
// This file contains all application-wide Sass mixins.
// -----------------------------------------------------------------------------

/// Event wrapper
/// @author Harry Roberts
/// @param {Bool} $self [false] - Whether or not to include current selector
/// @link https://twitter.com/csswizardry/status/478938530342006784 Original tweet from Harry Roberts
@mixin on-event($self: false) {
  @if $self {
    &,
    &:hover,
    &:active,
    &:focus {
      @content;
    }
  } @else {
    &:hover,
    &:active,
    &:focus {
      @content;
    }
  }
}

/// Make a context based selector a little more friendly
/// @author Hugo Giraudel
/// @param {String} $context
@mixin when-inside($context) {
  #{$context} & {
    @content;
  }
}

/// @author @dtodo1paco
@function ends-with($string, $find) {
  @if (str-slice($string, (str-length($string) - str-length($find) + 1)) == $find) {
    @return true;
  } @else {
    @return false;
  }
}
/// @author @dtodo1paco
@function mapGet($map, $list...) {
  @each $key in $list {
    $map: map-get($map, $key);
  }
  @if $map != null {
    @return $map; // Our value
  }
}


/// For media queries styles
/// @author @dtodo1paco
@mixin for-size($screen-size) {
  @if $screen-size == 'all' {
    @each $ss, $w in $screen-sizes {
      @include for-size(#{$ss})
    }
  } @else {
    @if $screen-size == 'small' {
      @include for-size('phone');
      @include for-size('smallphone');
    } @else {
      @if map-has-key($screen-sizes, $screen-size) {
        @media (min-width: #{mapGet($screen-sizes, $screen-size, 'min')}) and (max-width: #{mapGet($screen-sizes, $screen-size, 'max')}) {
          @content;
        }
      } @else {
        @warn "Unfortunately, no value could be retrieved for screen-size `#{$screen-size}`. "
        + "Please make sure it is defined in `$screen-sizes` map.";
      }
    }
  }
}
/// @author @dtodo1paco
@mixin smaller-than-size($screen-size) {
    @if map-has-key($screen-sizes, $screen-size) {
      @media (max-width: #{mapGet($screen-sizes, $screen-size, 'max')}) {
        @content;
      }
    }
    @else {
      @warn "Unable to found screen size `#{$screen-size}` "
    + " in `$screen-sizes` map.";
    }

}
